use clap::{App, Arg, AppSettings};

use fs::feature::xattr;

pub fn build_cli() -> App<'static, 'static> {
    // TODO:
    //     List Differences:
    //
    //     Aliases: 
    //         --color/--colour
    let mut app = App::new("exa")
        .author("ogham@bsago.me")
        .version(concat!("v", crate_version!()))
        .about("A modern `ls` replacement written in Rust")
        .help_short("?")
        .help_short("v")
        .setting(AppSettings::HidePossibleValuesInHelp)
        .arg(Arg::with_name("paths")
            .help("The files or directories to list")
            .multiple(true)
            .default_value("."))
        // Display options
        .arg(Arg::with_name("oneline")
            .short("1")
            .long("oneline")
            .help("display one entry per line")
            .overrides_with_all(&["long", "grid", "tree", "across"]))
        .arg(Arg::with_name("grid")
            .short("G")
            .long("grid")
            .help("display one entry per line")
            .overrides_with("grid"))
        .arg(Arg::with_name("long")
            .short("l")
            .long("long")
            .help("display extended details and attributes")
            .overrides_with_all(&["oneline", "binary", "bytes", "inode", "links", 
            "header", "blocks", "time", "group", "git", "extended"]))
        .arg(Arg::with_name("recurse")
            .short("R")
            .long("recurse")
            .help("recurse into directories")
            .overrides_with("list-dirs"))
        .arg(Arg::with_name("tree")
            .short("T")
            .long("tree")
            .help("recurse into subdirectories in a tree view")
            .overrides_with_all(&["list-dirs", "recurse", "oneline", "across"]))
        .arg(Arg::with_name("across")
            .short("x")
            .long("across")
            .help("sort multi-column view entries across")
            .overrides_with_all(&["grid", "oneline", "tree"]))
        .arg(Arg::with_name("color")
            .long("color")
            .takes_value(true)
            .value_name("WHEN")
            .alias("colour")
            .help("when to show anything in colours")
            .possible_values(&["always", "auto", "automatic", "never"])
            .default_value("auto"))
        .arg(Arg::with_name("color-scale")
            .long("color-scale")
            .alias("colour-scale")
            .help("use a colour scale when displaying file sizes"))
        // Filtering and sorting options
        .arg(Arg::with_name("group-directories-first")
            .long("group-directories-first")
            .help("list directories before other files"))
        .arg(Arg::with_name("all")
            .short("a")
            .long("all")
            .help("show dot-files"))
        .arg(Arg::with_name("list-dirs")
            .short("d")
            .long("list-dirs")
            .help("list directories as regular files")
            .overrides_with_all(&["recurse", "tree"]))
        .arg(Arg::with_name("reverse")
            .short("r")
            .long("reverse")
            .help("reverse order of files"))
        .arg(Arg::with_name("sort")
            .short("s")
            .long("sort")
            .help("field to sort by WORD")
            .takes_value(true)
            .value_name("WORD")
            .default_value("none")
            .possible_values(&["name", "filename", "Name", "Filename", "size", "filesize", 
            "ext", "extension", "Ext", "Extension", "mod", "modified" , "acc", "accessed", 
            "cr", "created", "none", "inode"]))
            // .possible_values(&["name", "size", "extension", "modified", 
            // "accessed", "created", "inode", "none"]))
        .arg(Arg::with_name("ignore-glob")
            .short("I")
            .long("ignore-glob")
            .help("patterns ('|' separated) of names to ignore")
            .takes_value(true)
            .value_delimiter("|")
            .multiple(true)
            .value_name("GLOBS"))
        // Long view options
        .arg(Arg::with_name("binary")
            .short("b")
            .long("binary")
            .help("use binary prefixes in file sizes")
            .overrides_with("bytes"))
        .arg(Arg::with_name("bytes")
            .short("B")
            .long("bytes")
            .help("list file sizes in bytes, without prefixes")
            .overrides_with("binary"))
        .arg(Arg::with_name("group")
            .short("g")
            .long("group")
            .help("show group as well as user"))
        .arg(Arg::with_name("header")
            .short("h")
            .long("header")
            .help("show a header row at the top"))
        .arg(Arg::with_name("links")
            .short("H")
            .long("links")
            .help("show number of hard links"))
        .arg(Arg::with_name("inode")
            .short("i")
            .long("inode")
            .help("show each file's inode number"))
        .arg(Arg::with_name("level")
            .short("L")
            .long("level")
            .help("maximum depth of recursion (implies --tree and --recurse)")
            .takes_value(true)
            .value_name("DEPTH"))
        .arg(Arg::with_name("modified")
            .short("m")
            .long("modified")
            .help("display timestamp of most recent modification")
            .overrides_with("time"))
        .arg(Arg::with_name("blocks")
            .short("S")
            .long("blocks")
            .help("show number of file system blocks"))
        .arg(Arg::with_name("time")
            .short("t")
            .long("time")
            .help("which timestamp to show for a file")
            .takes_value(true)
            .value_name("WORD")
            .default_value("mod")
            .possible_values(&["mod", "modified", "acc", "accessed", "cr", "created"])
            .overrides_with_all(&["modified", "accessed", "created"]))
        .arg(Arg::with_name("accessed")
            .short("u")
            .long("accessed")
            .help("display timestamp of last access for a file")
            .overrides_with("time"))
        .arg(Arg::with_name("created")
            .short("U")
            .long("created")
            .help("display timestamp of creation for a file")
            .overrides_with("time"));
            

        if cfg!(feature="git") {
            app = app.arg(Arg::with_name("git")
                .long("git")
                .help("show git status"));
        }

        if xattr::ENABLED {
            app = app.arg(Arg::with_name("extended")
                .short("@")
                .long("extended")
                .help("display extended attribute keys and sizes")
                .overrides_with("long"));
        }

        app
}